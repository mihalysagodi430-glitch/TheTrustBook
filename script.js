// Stripe Configuration
const STRIPE_PRICES = {
    writer_monthly: 'price_1SFJE32Iu126GwaReW9QvoTm',
    writer_annual: 'price_1SFJID2Iu126GwaRCUgtDAQg',
    business_monthly: 'price_1SFJG12Iu126GwaRGs3rmVMr',
    business_annual: 'price_1SFGF82Iu126GwaRdQ19kDGu',
    business_annual_limited: 'price_1SFJLy2Iu126GwaRYYeMeJlp'
};

// Stripe Publishable Key
const STRIPE_PK = 'pk_live_51SDVtM2Iu126GwaRI0eUqTWlMueREftpLHEn1WrKXaCXQuMG3ILKmaMJpPBTWqYOXO61uEMAEuJHYLkH3LtzdsYl00WHXGUQEI';

// Global variables
let currentUser = null;
let products = [];
let stripe = null;
let trustBookAI = null;
let pricingManager = null;

// Sample data for demonstration
const sampleProducts = [
    {
        id: 1,
        title: 'Digital Marketing Mastery',
        type: 'ebook',
        price: 12.99,
        description: 'Complete guide to digital marketing strategies and implementation.',
        author: 'Sarah Johnson',
        category: 'business',
        isAIGenerated: true
    },
    {
        id: 2,
        title: 'Professional Business Plan Template',
        type: 'template',
        price: 8.99,
        description: 'Comprehensive business plan template with financial projections.',
        author: 'Mike Chen',
        category: 'business',
        isAIGenerated: false
    },
    {
        id: 3,
        title: 'AI in Modern Business',
        type: 'ebook',
        price: 14.99,
        description: 'Exploring AI applications and future trends in business.',
        author: 'AI Generator',
        category: 'technology',
        isAIGenerated: true
    },
    {
        id: 4,
        title: 'Creative Writing Workbook',
        type: 'template',
        price: 6.99,
        description: 'Structured workbook for developing creative writing skills.',
        author: 'Emma Wilson',
        category: 'education',
        isAIGenerated: false
    }
];

// TrustBookAI Implementation
class TrustBookAI {
    constructor() {
        this.model = null;
        this.initialized = false;
        this.domainLocked = true;
        this.allowedDomain = 'thetrustbook.com';
        this.allowedSubdomains = ['thetrustbook.com', 'www.thetrustbook.com', 'trustbook.vercel.app', 'mihalysagodi430-glitch.github.io'];
        this.ebookOnly = true;
    }

    verifyDomain() {
        const currentDomain = window.location.hostname.toLowerCase();
        const isValidDomain = this.allowedSubdomains.some(domain => 
            currentDomain === domain || currentDomain.endsWith('.' + domain)
        );
        
        if (!isValidDomain) {
            throw new Error('TrustBookAI can only be used on TheTrustBook platform');
        }
        return true;
    }

    async initialize() {
        try {
            this.verifyDomain();
            console.log('🚀 Initializing TrustBookAI - Exclusive Ebook Generator');
            
            // In a real implementation, this would load the AI model
            // For now, we'll simulate initialization
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            this.initialized = true;
            console.log('✅ TrustBookAI Ready - Ebook Generation Exclusive');
            return true;
            
        } catch (error) {
            console.error('❌ TrustBookAI Initialization Failed:', error);
            return false;
        }
    }

    async generateEbookContent(topic, style, length, language) {
        if (!this.initialized) {
            await this.initialize();
        }

        // Simulate AI generation
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        return this.formatTrustBookOutput(topic, style, length, language);
    }

    formatTrustBookOutput(topic, style, length, language) {
        const timestamp = new Date().toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        return `
        <div class="trustbook-ebook" data-ai="trustbookai" data-generated="${timestamp}">
            <div class="trustbook-header">
                <div class="trustbook-watermark">
                    <span class="trustbook-badge">AI Generated by TrustBookAI</span>
                </div>
                <h1 class="ebook-title">${this.escapeHtml(topic)}</h1>
                <div class="ebook-meta">
                    <span class="meta-item">Style: ${style}</span>
                    <span class="meta-item">Platform: TheTrustBook</span>
                    <span class="meta-item">Generated: ${timestamp}</span>
                </div>
            </div>
            
            <div class="trustbook-content ${style}-theme">
                <h2 class="trustbook-chapter">Introduction to ${this.escapeHtml(topic)}</h2>
                <p>This comprehensive guide explores the fundamental concepts and practical applications of ${this.escapeHtml(topic)}. Whether you're a beginner or looking to deepen your knowledge, this ebook provides valuable insights and actionable strategies.</p>
                
                <h2 class="trustbook-chapter">Core Principles and Fundamentals</h2>
                <p>Understanding the basic principles is crucial for mastering ${this.escapeHtml(topic)}. This section covers the essential concepts that form the foundation of this field.</p>
                
                <div class="trustbook-highlight">
                    <strong>Key Takeaway:</strong> Master the fundamentals before advancing to complex applications.
                </div>
                
                <h2 class="trustbook-chapter">Practical Applications</h2>
                <p>Learn how to apply ${this.escapeHtml(topic)} in real-world scenarios. This chapter includes:</p>
                <ul>
                    <li>Step-by-step implementation guides</li>
                    <li>Case studies and examples</li>
                    <li>Common challenges and solutions</li>
                    <li>Best practices from industry experts</li>
                </ul>
                
                <h2 class="trustbook-chapter">Advanced Techniques</h2>
                <p>For those ready to take their skills to the next level, this section covers advanced methodologies and innovative approaches to ${this.escapeHtml(topic)}.</p>
                
                <h2 class="trustbook-chapter">Conclusion and Next Steps</h2>
                <p>This ebook has provided a comprehensive overview of ${this.escapeHtml(topic)}. The journey doesn't end here - continue learning and applying these concepts in your projects.</p>
            </div>
            
            <div class="trustbook-footer">
                <div class="trustbook-signature">
                    <p><strong>Generated exclusively for TheTrustBook Platform</strong></p>
                    <p>TrustBookAI - Professional Ebook Generation Engine</p>
                    <p class="copyright">© ${new Date().getFullYear()} TheTrustBook. All rights reserved.</p>
                </div>
            </div>
        </div>
        `;
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// Pricing Manager
class PricingManager {
    constructor() {
        this.totalUsers = 425;
        this.remainingDiscounts = 75;
        this.userPlan = this.getUserPlan();
        this.updateUI();
    }

    updateUI() {
        const limitedOffer = document.getElementById('limitedOffer');
        const businessAnnualBtn = document.getElementById('businessAnnualBtn');
        const userCounter = document.querySelector('.user-counter');
        
        if (this.remainingDiscounts > 0) {
            if (limitedOffer) {
                limitedOffer.innerHTML = `
                    <strong>FIRST 500 OFFER: €124.99/year!</strong><br>
                    <small>Only ${this.remainingDiscounts} spots left!</small>
                `;
            }
            if (businessAnnualBtn) {
                businessAnnualBtn.innerHTML = `Annual Plan - €124.99/year <span class="discount-badge">50% OFF</span>`;
                businessAnnualBtn.setAttribute('data-price', '124.99');
            }
        }

        if (userCounter) {
            userCounter.innerHTML = `<span class="count">${this.totalUsers}</span> users already joined!`;
        }
    }

    getUserPlan() {
        return localStorage.getItem('user_plan') || 'free';
    }

    setUserPlan(plan) {
        localStorage.setItem('user_plan', plan);
        this.userPlan = plan;
    }

    isEligibleForDiscount() {
        return this.remainingDiscounts > 0;
    }

    getStripePriceId(plan, period) {
        if (plan === 'business' && period === 'annual' && this.isEligibleForDiscount()) {
            return STRIPE_PRICES.business_annual_limited;
        }
        
        const key = `${plan}_${period}`;
        return STRIPE_PRICES[key];
    }
}

// Stripe Checkout Handler
class StripeCheckoutHandler {
    constructor() {
        this.stripe = null;
        this.initializeStripe();
    }

    initializeStripe() {
        this.stripe = Stripe(STRIPE_PK);
    }

    async handleSubscription(plan, period, price) {
        if (!this.stripe) {
            alert('Payment system is not available. Please try again later.');
            return;
        }

        if (plan === 'free') {
            this.handleFreePlan();
            return;
        }

        const priceId = pricingManager.getStripePriceId(plan, period);
        
        this.showPaymentModal(plan, period, price);
        
        try {
            // In a real implementation, this would call your backend
            // For demo purposes, we'll simulate the process
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // Simulate successful payment
            this.showPlanActivationModal(plan, price);
            pricingManager.setUserPlan(plan);
            
        } catch (error) {
            this.hidePaymentModal();
            alert('Payment processing failed. Please try again.');
            console.error('Stripe error:', error);
        }
    }

    handleFreePlan() {
        pricingManager.setUserPlan('free');
        this.showPlanActivationModal('free', '0');
    }

    showPaymentModal(plan, period, price) {
        const modal = document.getElementById('stripeModal');
        const modalBody = modal.querySelector('.modal-body');
        
        const planNames = {
            'writer': 'Writer',
            'business': 'Business Guide',
            'free': 'Explorer'
        };
        
        const periodText = period === 'annual' ? 'year' : 'month';
        const finalPrice = plan === 'business' && period === 'annual' && pricingManager.isEligibleForDiscount() 
            ? '124.99' 
            : price;

        modalBody.innerHTML = `
            <div class="payment-summary">
                <h4>Order Summary</h4>
                <div class="payment-item">
                    <span>Plan:</span>
                    <span>${planNames[plan]} (${period === 'annual' ? 'Annual' : 'Monthly'})</span>
                </div>
                <div class="payment-item">
                    <span>Price:</span>
                    <span>€${finalPrice}/${periodText}</span>
                </div>
                ${plan === 'business' && period === 'annual' && pricingManager.isEligibleForDiscount() ? `
                <div class="payment-item">
                    <span>Discount:</span>
                    <span class="discount-badge">50% OFF</span>
                </div>
                ` : ''}
                <div class="payment-item payment-total">
                    <span>Total:</span>
                    <span>€${finalPrice}/${periodText}</span>
                </div>
            </div>
            <div id="stripeCheckout">
                <p>Processing your payment securely...</p>
                <div class="loading-spinner"></div>
            </div>
        `;
        
        modal.classList.add('active');
    }

    hidePaymentModal() {
        document.getElementById('stripeModal').classList.remove('active');
    }

    showPlanActivationModal(plan, price) {
        const modal = document.getElementById('stripeModal');
        const modalBody = modal.querySelector('.modal-body');
        
        const planNames = {
            'writer': 'Writer',
            'business': 'Business Guide', 
            'free': 'Explorer'
        };

        modalBody.innerHTML = `
            <div class="payment-summary">
                <div style="text-align: center; color: #27ae60; font-size: 3rem;">🎉</div>
                <h3 style="text-align: center;">Welcome to ${planNames[plan]} Plan!</h3>
                <p style="text-align: center;">Your ${plan === 'free' ? 'free' : 'premium'} plan has been activated successfully.</p>
                
                ${plan === 'free' ? `
                <div class="trustbook-highlight">
                    <strong>Next Steps:</strong>
                    <ul>
                        <li>Start creating your first AI-generated ebook</li>
                        <li>Explore the basic templates</li>
                        <li>Upgrade anytime to unlock more features</li>
                    </ul>
                </div>
                ` : ''}
                
                <div style="text-align: center; margin-top: 2rem;">
                    <button class="cta-button" onclick="closeModalAndRedirect()">
                        Start Creating Ebooks
                    </button>
                </div>
            </div>
        `;
        
        modal.classList.add('active');
    }
}

// Initialize the application
document.addEventListener('DOMContentLoaded', function() {
    // Load sample data
    products = [...sampleProducts];
    
    // Initialize components
    trustBookAI = new TrustBookAI();
    pricingManager = new PricingManager();
    const stripeHandler = new StripeCheckoutHandler();
    
    // Initialize real-time clock
    updateClock();
    setInterval(updateClock, 1000);
    
    // Check if user is logged in
    checkLoginStatus();
    
    // Load marketplace products
    loadMarketplaceProducts();
    
    // Initialize event listeners
    initEventListeners();
    
    // Update hero stats
    updateHeroStats();
    
    // Pre-load AI in background
    setTimeout(() => {
        trustBookAI.initialize().catch(console.error);
    }, 3000);
});

// Update real-time clock
function updateClock() {
    const now = new Date();
    const timeString = now.toLocaleTimeString('en-US', { 
        hour: '2-digit', 
        minute: '2-digit',
        second: '2-digit',
        hour12: true 
    });
    const dateString = now.toLocaleDateString('en-US', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
    });
    
    document.getElementById('currentTime').textContent = `${dateString} | ${timeString}`;
}

// Check if user is logged in
function checkLoginStatus() {
    const savedUser = localStorage.getItem('trustbook_user');
    if (savedUser) {
        currentUser = JSON.parse(savedUser);
        updateUIForLoggedInUser();
    } else {
        updateUIForLoggedOutUser();
    }
}

// Update UI for logged in user
function updateUIForLoggedInUser() {
    document.getElementById('userName').textContent = currentUser.name;
    document.getElementById('userMenu').classList.remove('hidden');
    document.querySelector('.auth-buttons').classList.add('hidden');
    
    // Update mobile menu
    const mobileAuth = document.querySelector('.mobile-auth');
    if (mobileAuth) {
        mobileAuth.innerHTML = `<span>Welcome, ${currentUser.name}</span>`;
    }
    
    // Generate referral link
    generateReferralLink();
}

// Update UI for logged out user
function updateUIForLoggedOutUser() {
    document.getElementById('userMenu').classList.add('hidden');
    document.querySelector('.auth-buttons').classList.remove('hidden');
    
    // Update mobile menu
    const mobileAuth = document.querySelector('.mobile-auth');
    if (mobileAuth) {
        mobileAuth.innerHTML = `
            <button class="btn-login" id="mobileLoginBtn">Login</button>
            <button class="btn-register" id="mobileRegisterBtn">Register</button>
        `;
    }
}

// Initialize all event listeners
function initEventListeners() {
    // Mobile menu toggle
    const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
    const mobileMenu = document.querySelector('.mobile-menu');
    
    if (mobileMenuToggle) {
        mobileMenuToggle.addEventListener('click', function() {
            mobileMenu.classList.toggle('active');
        });
    }
    
    // Smooth scroll for navigation
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            if (targetId === '#') return;
            
            const targetElement = document.querySelector(targetId);
            if (targetElement) {
                // Close mobile menu if open
                mobileMenu.classList.remove('active');
                
                window.scrollTo({
                    top: targetElement.offsetTop - 80,
                    behavior: 'smooth'
                });
            }
        });
    });
    
    // Active navigation on scroll
    function setActiveNav() {
        const sections = document.querySelectorAll('section');
        const navLinks = document.querySelectorAll('.main-nav a, .mobile-menu a');
        
        let current = '';
        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.clientHeight;
            if (scrollY >= (sectionTop - 100)) {
                current = section.getAttribute('id');
            }
        });
        
        navLinks.forEach(link => {
            link.classList.remove('nav-active');
            if (link.getAttribute('href') === `#${current}`) {
                link.classList.add('nav-active');
            }
        });
    }
    
    window.addEventListener('scroll', setActiveNav);
    
    // Auth buttons
    document.getElementById('loginBtn').addEventListener('click', showLoginModal);
    document.getElementById('registerBtn').addEventListener('click', showRegisterModal);
    document.getElementById('mobileLoginBtn').addEventListener('click', showLoginModal);
    document.getElementById('mobileRegisterBtn').addEventListener('click', showRegisterModal);
    
    // Logout button
    document.getElementById('logoutBtn').addEventListener('click', logout);
    
    // Modal close buttons
    document.querySelectorAll('.close-modal').forEach(button => {
        button.addEventListener('click', function() {
            document.querySelectorAll('.modal').forEach(modal => {
                modal.classList.remove('active');
            });
        });
    });
    
    // Close modal when clicking outside
    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', function(e) {
            if (e.target === this) {
                this.classList.remove('active');
            }
        });
    });
    
    // Auth form switches
    document.getElementById('switchToRegister').addEventListener('click', function() {
        document.getElementById('loginModal').classList.remove('active');
        document.getElementById('registerModal').classList.add('active');
    });
    
    document.getElementById('switchToLogin').addEventListener('click', function() {
        document.getElementById('registerModal').classList.remove('active');
        document.getElementById('loginModal').classList.add('active');
    });
    
    // Form submissions
    document.getElementById('loginForm').addEventListener('submit', handleLogin);
    document.getElementById('registerForm').addEventListener('submit', handleRegister);
    document.getElementById('uploadForm').addEventListener('submit', handleProductUpload);
    
    // Marketplace actions
    document.getElementById('uploadProductBtn').addEventListener('click', function() {
        if (!currentUser) {
            alert('Please log in to upload products.');
            showLoginModal();
            return;
        }
        document.getElementById('uploadModal').classList.add('active');
    });
    
    // Marketplace filters
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const filter = this.getAttribute('data-filter');
            
            document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            filterMarketplaceProducts(filter);
        });
    });
    
    // Marketplace search
    document.getElementById('searchInput').addEventListener('input', function() {
        searchProducts(this.value);
    });
    
    // AI Generator
    document.getElementById('generateEbookBtn').addEventListener('click', generateEbookWithAI);
    document.getElementById('saveEbook').addEventListener('click', saveEbook);
    document.getElementById('publishEbook').addEventListener('click', publishEbook);
    
    // Hero buttons
    document.getElementById('generateEbook').addEventListener('click', function() {
        document.getElementById('generator').scrollIntoView({
            behavior: 'smooth'
        });
    });
    
    document.getElementById('browseMarketplace').addEventListener('click', function() {
        document.getElementById('marketplace').scrollIntoView({
            behavior: 'smooth'
        });
    });
    
    // Pricing buttons
    document.querySelectorAll('.pricing-card .cta-button').forEach(button => {
        button.addEventListener('click', function() {
            if (!currentUser) {
                showLoginModal();
                return;
            }

            const plan = this.getAttribute('data-plan');
            const price = this.getAttribute('data-price');
            const period = this.getAttribute('data-period');

            const stripeHandler = new StripeCheckoutHandler();
            stripeHandler.handleSubscription(plan, period, price);
        });
    });
    
    // Referral copy button
    document.getElementById('copyReferralBtn').addEventListener('click', copyReferralLink);
    
    // AI toggle
    document.getElementById('enableAI').addEventListener('change', updateAIStatus);
}

// Show login modal
function showLoginModal() {
    document.getElementById('loginModal').classList.add('active');
}

// Show register modal
function showRegisterModal() {
    document.getElementById('registerModal').classList.add('active');
}

// Handle login form submission
function handleLogin(e) {
    e.preventDefault();
    
    const email = document.getElementById('loginEmail').value;
    const password = document.getElementById('loginPassword').value;
    
    if (!email || !password) {
        alert('Please fill in all fields.');
        return;
    }
    
    // Simulate login
    currentUser = {
        id: Date.now(),
        name: 'Demo User',
        email: email,
        joinDate: new Date().toISOString()
    };
    
    localStorage.setItem('trustbook_user', JSON.stringify(currentUser));
    updateUIForLoggedInUser();
    document.getElementById('loginModal').classList.remove('active');
    document.getElementById('loginForm').reset();
    
    alert('Successfully logged in!');
}

// Handle register form submission
function handleRegister(e) {
    e.preventDefault();
    
    const name = document.getElementById('registerName').value;
    const email = document.getElementById('registerEmail').value;
    const password = document.getElementById('registerPassword').value;
    const confirmPassword = document.getElementById('registerConfirmPassword').value;
    const referralCode = document.getElementById('referralCode').value;
    
    if (!name || !email || !password || !confirmPassword) {
        alert('Please fill in all fields.');
        return;
    }
    
    if (password !== confirmPassword) {
        alert('Passwords do not match.');
        return;
    }
    
    if (!document.getElementById('agreeTerms').checked) {
        alert('You must agree to the Terms of Service and Privacy Policy.');
        return;
    }
    
    // Handle referral if provided
    if (referralCode) {
        processReferral(referralCode);
    }
    
    currentUser = {
        id: Date.now(),
        name: name,
        email: email,
        joinDate: new Date().toISOString(),
        hasTrial: !!referralCode
    };
    
    localStorage.setItem('trustbook_user', JSON.stringify(currentUser));
    updateUIForLoggedInUser();
    document.getElementById('registerModal').classList.remove('active');
    document.getElementById('registerForm').reset();
    
    if (referralCode) {
        alert('Account created successfully! You have 14 days free trial of Business Guide.');
    } else {
        alert('Account created successfully!');
    }
}

// Process referral code
function processReferral(referralCode) {
    console.log('Processing referral code:', referralCode);
    localStorage.setItem('trustbook_referral', referralCode);
}

// Logout function
function logout() {
    currentUser = null;
    localStorage.removeItem('trustbook_user');
    updateUIForLoggedOutUser();
    alert('You have been logged out.');
}

// Load marketplace products
function loadMarketplaceProducts() {
    const productsGrid = document.querySelector('.products-grid');
    
    productsGrid.innerHTML = '';
    
    products.forEach(product => {
        const productCard = document.createElement('div');
        productCard.className = 'product-card';
        productCard.setAttribute('data-type', product.type);
        if (product.isAIGenerated) {
            productCard.setAttribute('data-ai', 'true');
        }
        
        const typeIcon = product.type === 'ebook' ? '📚' : '📄';
        const aiBadge = product.isAIGenerated ? '<span class="product-type">AI Generated</span>' : '';
        
        productCard.innerHTML = `
            <div class="product-image">
                ${typeIcon}
            </div>
            <div class="product-content">
                <h3 class="product-title">${product.title}</h3>
                <p class="product-description">${product.description}</p>
                <div class="product-meta">
                    <div class="product-price">€${product.price.toFixed(2)}</div>
                    <div class="product-type">${product.type === 'ebook' ? 'Ebook' : 'Template'}</div>
                </div>
                <div class="product-author">By: ${product.author}</div>
                ${aiBadge}
            </div>
        `;
        
        productsGrid.appendChild(productCard);
    });
}

// Filter marketplace products
function filterMarketplaceProducts(filter) {
    const productCards = document.querySelectorAll('.product-card');
    
    productCards.forEach(card => {
        if (filter === 'all') {
            card.style.display = 'block';
        } else if (filter === 'ai') {
            if (card.getAttribute('data-ai') === 'true') {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        } else {
            if (card.getAttribute('data-type') === filter) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        }
    });
}

// Search products
function searchProducts(query) {
    const productCards = document.querySelectorAll('.product-card');
    const lowercaseQuery = query.toLowerCase();
    
    productCards.forEach(card => {
        const title = card.querySelector('.product-title').textContent.toLowerCase();
        const description = card.querySelector('.product-description').textContent.toLowerCase();
        
        if (title.includes(lowercaseQuery) || description.includes(lowercaseQuery)) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
}

// Handle product upload
function handleProductUpload(e) {
    e.preventDefault();
    
    if (!currentUser) {
        alert('Please log in to upload products.');
        return;
    }
    
    const title = document.getElementById('productTitle').value;
    const type = document.getElementById('productType').value;
    const price = parseFloat(document.getElementById('productPrice').value);
    const description = document.getElementById('productDescription').value;
    const category = document.getElementById('productCategory').value;
    
    const newProduct = {
        id: Date.now(),
        title: title,
        type: type,
        price: price,
        description: description,
        author: currentUser.name,
        category: category,
        isAIGenerated: false
    };
    
    products.unshift(newProduct);
    loadMarketplaceProducts();
    document.getElementById('uploadModal').classList.remove('active');
    document.getElementById('uploadForm').reset();
    
    alert('Product uploaded successfully!');
}

// Generate ebook with AI
async function generateEbookWithAI() {
    const topic = document.getElementById('ebookTopic').value;
    const length = document.getElementById('ebookLength').value;
    const style = document.getElementById('ebookStyle').value;
    const language = document.getElementById('ebookLanguage').value;
    const enableAI = document.getElementById('enableAI').checked;

    if (!topic) {
        alert('Please enter an ebook topic.');
        return;
    }

    const generateBtn = document.getElementById('generateEbookBtn');
    generateBtn.classList.add('button-loading');

    try {
        let ebookContent;

        if (enableAI && trustBookAI) {
            // Show AI loading
            document.getElementById('aiLoadingScreen').style.display = 'flex';
            
            ebookContent = await trustBookAI.generateEbookContent(topic, style, length, language);
            
            // Hide AI loading
            document.getElementById('aiLoadingScreen').style.display = 'none';
        } else {
            ebookContent = generateBasicEbookContent(topic, style, length);
        }

        displayGeneratedEbook(ebookContent);
        
    } catch (error) {
        console.error('Ebook generation error:', error);
        alert('Generation failed. Please try again.');
    } finally {
        generateBtn.classList.remove('button-loading');
    }
}

// Basic fallback generator
function generateBasicEbookContent(topic, style, length) {
    return `
    <div class="trustbook-ebook">
        <div class="trustbook-header">
            <div class="trustbook-watermark">
                <span class="trustbook-badge">Basic Generator</span>
            </div>
            <h1 class="ebook-title">${topic}</h1>
        </div>
        <div class="trustbook-content">
            <p>Enable TrustBookAI for advanced AI-powered ebook generation with domain-locked security.</p>
            <div class="trustbook-highlight">
                <strong>Basic Ebook Structure:</strong>
                <p>This is a basic template for your ebook about "${topic}". Upgrade to enable AI generation for more sophisticated, tailored content.</p>
            </div>
            <h2 class="trustbook-chapter">Chapter 1: Introduction</h2>
            <p>Start with an engaging introduction about ${topic}...</p>
            <h2 class="trustbook-chapter">Chapter 2: Core Concepts</h2>
            <p>Explain the fundamental principles...</p>
            <h2 class="trustbook-chapter">Chapter 3: Practical Applications</h2>
            <p>Show real-world examples and use cases...</p>
        </div>
    </div>
    `;
}

// Display generated ebook
function displayGeneratedEbook(content) {
    const previewContent = document.getElementById('previewContent');
    const generatorPreview = document.getElementById('generatorPreview');
    
    if (previewContent && generatorPreview) {
        previewContent.innerHTML = content;
        generatorPreview.classList.remove('hidden');
        generatorPreview.scrollIntoView({ behavior: 'smooth' });
    }
}

// Save ebook
function saveEbook() {
    if (!currentUser) {
        alert('Please log in to save ebooks.');
        showLoginModal();
        return;
    }
    
    alert('Ebook saved successfully!');
}

// Publish ebook to marketplace
function publishEbook() {
    if (!currentUser) {
        alert('Please log in to publish ebooks.');
        showLoginModal();
        return;
    }
    
    document.getElementById('uploadModal').classList.add('active');
    const topic = document.getElementById('ebookTopic').value;
    if (topic) {
        document.getElementById('productTitle').value = topic;
    }
    document.getElementById('productType').value = 'ebook';
    
    alert('Please complete the product details to publish your ebook.');
}

// Generate referral link
function generateReferralLink() {
    if (!currentUser) return;
    
    const referralCode = btoa(currentUser.id.toString()).replace(/=/g, '');
    const referralLink = `${window.location.origin}?ref=${referralCode}`;
    
    document.getElementById('referralLink').value = referralLink;
}

// Copy referral link to clipboard
function copyReferralLink() {
    const referralInput = document.getElementById('referralLink');
    referralInput.select();
    document.execCommand('copy');
    
    alert('Referral link copied to clipboard!');
}

// Update AI status
function updateAIStatus() {
    const aiStatus = document.getElementById('aiStatus');
    if (trustBookAI && trustBookAI.initialized) {
        aiStatus.textContent = '(Ready)';
        aiStatus.style.color = '#27ae60';
    } else {
        aiStatus.textContent = '(Loading...)';
        aiStatus.style.color = '#f39c12';
    }
}

// Update hero stats with random numbers
function updateHeroStats() {
    setInterval(() => {
        const ebooksElement = document.getElementById('totalEbooks');
        const salesElement = document.getElementById('totalSales');
        const usersElement = document.getElementById('activeUsers');
        
        if (ebooksElement) {
            let current = parseInt(ebooksElement.textContent.replace(/,/g, ''));
            ebooksElement.textContent = (current + Math.floor(Math.random() * 5)).toLocaleString();
        }
        
        if (salesElement) {
            let current = parseInt(salesElement.textContent.replace(/,/g, ''));
            salesElement.textContent = (current + Math.floor(Math.random() * 3)).toLocaleString();
        }
        
        if (usersElement) {
            let current = parseInt(usersElement.textContent.replace(/,/g, ''));
            usersElement.textContent = (current + Math.floor(Math.random() * 2)).toLocaleString();
        }
    }, 5000);
}

// Close modal and redirect
function closeModalAndRedirect() {
    document.getElementById('stripeModal').classList.remove('active');
    document.getElementById('generator').scrollIntoView({ behavior: 'smooth' });
}

// Check for referral parameter in URL
function checkForReferral() {
    const urlParams = new URLSearchParams(window.location.search);
    const referralCode = urlParams.get('ref');
    
    if (referralCode) {
        localStorage.setItem('pending_referral', referralCode);
        if (currentUser) {
            processReferral(referralCode);
        }
        const newUrl = window.location.pathname;
        window.history.replaceState({}, document.title, newUrl);
    }
}

// Initialize referral check
checkForReferral();

// Periodic AI status update
setInterval(updateAIStatus, 2000);