import { createClient } from '@supabase/supabase-js'; import fetch from 'node-fetch'; const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_SERVICE_ROLE); export default async function handler(req, res){ if(req.method!=='POST') return res.status(405).end(); const { title, lang='en', theme='General', pages=12, style='Galaxy Motion', author_id } = req.body; let content = `Title: ${title}\nTheme: ${theme}\n\nThis is a generated ebook (demo).`; if(process.env.OPENAI_KEY){ try{ const prompt = `Write a short ${pages}-page ebook outline in ${lang} about "${title}" with theme ${theme}.`; const r = await fetch('https://api.openai.com/v1/chat/completions',{ method:'POST', headers:{ 'Authorization': `Bearer ${process.env.OPENAI_KEY}`, 'Content-Type':'application/json' }, body: JSON.stringify({ model: 'gpt-4o-mini', messages:[{ role:'user', content: prompt }], max_tokens:1200 }) }); const j = await r.json(); content = j?.choices?.[0]?.message?.content || content; }catch(e){ console.error('OpenAI error', e.message); } } const filename = `ebooks/${Date.now()}-${title.replace(/[^a-z0-9]/gi,'_')}.txt`; const buf = Buffer.from(content,'utf8'); const { data, error: upErr } = await supabase.storage.from('ebooks').upload(filename, buf, { contentType:'text/plain' }); if(upErr){ console.error('Upload error', upErr.message); return res.status(500).json({ error: upErr.message }); } const { publicURL } = supabase.storage.from('ebooks').getPublicUrl(filename); const { error: insErr } = await supabase.from('ebooks').insert([{ title, description: `AI generated: ${title}`, author_id, file_url: publicURL, price: 0.00, is_published: false }]); if(insErr) return res.status(500).json({ error: insErr.message }); res.json({ downloadUrl: publicURL }); }