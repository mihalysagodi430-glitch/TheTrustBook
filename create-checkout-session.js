import Stripe from 'stripe'; import { createClient } from '@supabase/supabase-js'; const stripe = new Stripe(process.env.STRIPE_SECRET_KEY); const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_SERVICE_ROLE); export default async function handler(req, res){ if(req.method!=='POST') return res.status(405).end(); try{ const { priceEnvKey, listingId } = req.body; if(priceEnvKey){ const priceId = process.env[priceEnvKey]; if(!priceId) return res.status(400).json({ error:'Price not configured' }); const session = await stripe.checkout.sessions.create({ mode:'subscription', payment_method_types:['card'], line_items:[{ price: priceId, quantity:1 }], success_url:`${process.env.NEXT_PUBLIC_SITE_URL || process.env.DOMAIN}/success.html`, cancel_url:`${process.env.NEXT_PUBLIC_SITE_URL || process.env.DOMAIN}/cancel.html` }); return res.json({ url: session.url }); } if(listingId){ const { data: listing, error } = await supabase.from('listings').select('*').eq('id', listingId).single(); if(error || !listing) return res.status(400).json({ error:'Listing not found' }); const priceCents = Math.round(listing.price * 100); const session = await stripe.checkout.sessions.create({ payment_method_types:['card'], mode:'payment', line_items:[{ price_data:{ currency:'eur', product_data:{ name: listing.title }, unit_amount: priceCents }, quantity:1 }], payment_intent_data:{ application_fee_amount: Math.round(priceCents*0.10), transfer_data:{ destination: listing.seller_stripe_account_id } }, success_url:`${process.env.NEXT_PUBLIC_SITE_URL || process.env.DOMAIN}/success.html`, cancel_url:`${process.env.NEXT_PUBLIC_SITE_URL || process.env.DOMAIN}/cancel.html` }); await supabase.from('purchases').insert([{ listing_id: listingId, amount_cents: priceCents, stripe_session_id: session.id }]); return res.json({ url: session.url }); } res.status(400).json({ error:'Invalid request' }); }catch(e){ console.error(e); res.status(500).json({ error: e.message }); } }